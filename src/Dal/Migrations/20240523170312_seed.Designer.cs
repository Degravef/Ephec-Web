// <auto-generated />
using System;
using Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dal.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240523170312_seed")]
    partial class seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<int>("CoursesAsStudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CoursesAsStudentId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseUser");
                });

            modelBuilder.Entity("Dal.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "C# is a general-purpose, multi-paradigm programming language encompassing static typing, strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines.",
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "TypeScript is a strict syntactical superset of JavaScript and adds optional static typing to the language. It is designed for the development of large applications and transcompiles to JavaScript.",
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 3,
                            Description = "JavaScript, often abbreviated as JS, is a programming language that conforms to the ECMAScript specification. JavaScript is high-level, often just-in-time compiled, and multi-paradigm. It has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions.",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Java is a general-purpose programming language that is class-based, object-oriented, and designed to have as few implementation dependencies as possible.",
                            Name = "Java"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Kotlin is a cross-platform, statically typed, general-purpose programming language with type inference. It is designed to interoperate fully with Java.",
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Swift is a powerful and intuitive programming language for macOS, iOS, watchOS, and tvOS. Writing Swift code is interactive and fun, the syntax is concise yet expressive, and Swift includes modern features developers love.",
                            Name = "Swift"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Rust is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is syntactically similar to C++.",
                            Name = "Rust"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Python is an interpreted, high-level, general-purpose programming language. Created by  ",
                            Name = "Python"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Go is an open-source programming language that makes it easy to build simple, reliable, and efficient software.",
                            Name = "Go"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Scala is a strong statically typed general-purpose programming language which supports both object-oriented programming and functional programming.",
                            Name = "Scala"
                        });
                });

            modelBuilder.Entity("Dal.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 157, 61, 98, 255, 191, 4, 139, 120, 140, 91, 14, 52, 253, 149, 100, 241, 202, 0, 2, 96, 232, 242, 86, 168, 100, 42, 138, 121, 150, 205, 42, 169, 83, 166, 63, 152, 190, 56, 192, 36, 60, 213, 238, 223, 10, 242, 236, 127, 176, 14, 206, 148, 158, 237, 235, 60, 97, 124, 160, 37, 244, 252, 111, 30, 95, 179, 248, 58, 84, 245, 219, 118, 231, 78, 239, 174, 101, 182, 102, 74, 6, 24, 252, 5, 104, 202, 222, 164, 185, 198, 170, 226, 115, 135, 245, 65, 87, 146, 2, 23, 91, 8, 252, 228, 47, 138, 185, 116, 132, 141, 180, 149, 75, 187, 49, 62, 225, 238, 170, 216, 50, 140, 123, 194, 47, 242, 145, 172, 192, 234, 246, 173, 222, 127, 105, 197, 53, 21, 167, 87, 54, 45, 53, 145, 80, 188, 134, 131, 139, 208, 199, 96, 23, 59, 142, 5, 89, 115, 140, 72, 231, 187, 157, 197, 181, 146, 117, 155, 142, 167, 240, 211, 222, 97, 145, 93, 162, 89, 213, 194, 56, 35, 123, 204, 191, 156, 123, 250, 243, 104, 33, 131, 249, 78, 172, 35, 29, 55, 139, 124, 180, 159, 90, 163, 140, 5, 152, 208, 179, 183, 121, 251, 65, 10, 58, 219, 238, 154, 84, 127, 171, 148, 248, 35, 178, 93, 5, 60, 117, 200, 157, 235, 182, 220, 98, 18, 52, 85, 126, 79, 221, 44, 188, 24, 238, 60, 156, 207, 221, 246, 234, 253, 221, 25, 165, 139, 160, 47, 150, 46, 165, 151, 128, 107, 193, 237, 96, 88, 74, 18, 92, 206, 82, 143, 107, 13, 21, 202, 231, 111, 252, 200, 192, 79, 165, 9, 105, 196, 220, 9, 161, 87, 37, 48, 19, 55, 60, 163, 86, 94, 63, 85, 15, 131, 193, 92, 193, 3, 142, 92, 232, 61, 150, 66, 72, 217, 88, 177, 251, 42, 209, 200, 55, 181, 231, 142, 175, 145, 254, 34, 47, 204, 80, 142, 202, 246, 80, 88, 196, 169, 75, 179, 194, 239, 173, 156, 5, 2, 244, 8, 165, 121, 136, 170, 136, 31, 33, 238, 202, 34, 70, 106, 71, 132, 167, 243, 85, 117, 204, 105, 135, 193, 104, 125, 163, 100, 108, 47, 6, 73, 94, 178, 4, 169, 155, 95, 227, 224, 81, 133, 103, 178, 98, 114, 199, 161, 16, 73, 162, 143, 177, 247, 206, 209, 171, 41, 106, 51, 79, 137, 110, 96, 20, 15, 181, 250, 42, 138, 16, 149, 238, 34, 237, 225, 183, 111, 80, 125, 145, 2, 96, 190, 17, 102, 248, 37, 223, 12, 151, 235, 34, 190, 11, 93, 38, 185, 81, 172, 183, 149, 116, 22, 105, 82, 233, 52, 68, 241, 76, 181, 242, 152, 110, 246, 209, 100, 41, 216, 215, 185, 162, 186, 96, 97, 94, 220, 80, 180, 100, 207, 232, 73, 217, 4, 32, 0, 252, 250, 243, 12, 48, 220, 24, 147, 97, 250, 78, 188, 37, 97, 59, 167, 249, 97, 91, 235, 193, 89, 62, 189, 155, 183 },
                            PasswordSalt = new byte[] { 170, 128, 98, 8, 20, 127, 127, 191, 253, 156, 219, 49, 6, 23, 189, 184, 19, 67, 150, 188, 137, 186, 237, 160, 180, 64, 218, 141, 8, 168, 107, 41, 142, 71, 112, 123, 182, 153, 172, 152, 198, 82, 176, 188, 57, 127, 219, 56, 176, 136, 84, 118, 83, 82, 94, 191, 26, 222, 240, 45, 128, 112, 61, 16, 211, 75, 51, 52, 63, 20, 144, 176, 178, 144, 227, 84, 178, 28, 130, 226, 3, 236, 178, 10, 84, 84, 51, 9, 200, 9, 1, 105, 227, 218, 139, 223, 114, 223, 9, 216, 253, 25, 62, 1, 192, 182, 10, 146, 149, 114, 184, 53, 224, 204, 210, 51, 91, 139, 148, 192, 49, 166, 234, 32, 255, 196, 117, 116 },
                            Role = 2,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 118, 231, 12, 227, 92, 153, 138, 62, 98, 35, 63, 115, 75, 16, 158, 237, 88, 245, 160, 106, 144, 165, 221, 211, 31, 125, 27, 161, 240, 164, 232, 44, 1, 134, 43, 245, 216, 201, 235, 170, 34, 204, 156, 116, 173, 46, 196, 116, 77, 217, 131, 94, 146, 153, 148, 116, 138, 121, 112, 11, 175, 122, 99, 153, 110, 83, 132, 41, 140, 134, 228, 108, 132, 92, 230, 98, 98, 130, 194, 91, 76, 22, 63, 140, 159, 46, 118, 141, 7, 219, 7, 43, 25, 215, 39, 8, 88, 136, 183, 46, 58, 21, 86, 137, 130, 67, 233, 35, 173, 42, 85, 13, 81, 3, 228, 71, 149, 48, 78, 241, 247, 73, 41, 195, 248, 220, 146, 246, 195, 242, 226, 87, 205, 109, 175, 143, 78, 71, 104, 123, 214, 168, 113, 179, 183, 121, 68, 201, 27, 35, 96, 227, 1, 180, 18, 122, 171, 14, 137, 250, 72, 207, 231, 80, 36, 14, 64, 189, 108, 154, 195, 15, 219, 114, 147, 252, 86, 168, 237, 115, 82, 144, 41, 134, 49, 220, 51, 11, 222, 229, 94, 243, 204, 176, 157, 110, 181, 156, 101, 91, 54, 131, 219, 214, 148, 135, 141, 134, 110, 144, 181, 65, 85, 105, 55, 208, 172, 156, 199, 224, 234, 49, 9, 46, 127, 252, 97, 40, 192, 68, 136, 157, 217, 178, 8, 133, 7, 146, 65, 232, 126, 158, 42, 213, 152, 237, 81, 248, 98, 39, 29, 140, 155, 74, 136, 175, 67, 157, 45, 131, 189, 20, 90, 232, 130, 145, 89, 167, 232, 252, 216, 188, 11, 179, 181, 13, 255, 5, 63, 119, 220, 114, 147, 172, 224, 238, 225, 125, 26, 9, 219, 57, 223, 88, 235, 64, 160, 203, 113, 94, 7, 116, 32, 228, 119, 158, 169, 169, 23, 12, 59, 172, 127, 39, 73, 130, 69, 228, 163, 15, 113, 143, 185, 111, 92, 235, 66, 57, 196, 0, 196, 248, 120, 91, 244, 197, 142, 120, 18, 228, 75, 76, 112, 109, 132, 112, 191, 91, 149, 176, 176, 247, 158, 161, 183, 113, 167, 56, 219, 214, 237, 242, 68, 60, 190, 131, 139, 50, 168, 192, 21, 2, 218, 127, 220, 145, 47, 193, 164, 136, 235, 29, 65, 197, 252, 97, 70, 59, 39, 131, 218, 69, 64, 221, 32, 176, 148, 193, 16, 100, 139, 170, 40, 128, 6, 196, 86, 255, 5, 217, 78, 158, 118, 222, 97, 21, 243, 236, 32, 189, 28, 101, 22, 114, 127, 203, 89, 8, 130, 253, 26, 193, 62, 27, 188, 41, 220, 227, 187, 193, 125, 38, 98, 224, 209, 15, 242, 96, 154, 18, 237, 17, 22, 246, 191, 187, 250, 34, 137, 8, 142, 180, 11, 28, 29, 222, 102, 85, 37, 185, 70, 254, 48, 115, 109, 95, 174, 155, 18, 25, 21, 209, 7, 250, 206, 21, 97, 72, 183, 219, 114, 224, 141, 186, 101, 242, 244, 146, 36, 112, 127, 74, 241, 178, 217, 229, 50, 214, 223, 255, 5, 191 },
                            PasswordSalt = new byte[] { 149, 193, 223, 188, 242, 217, 30, 63, 114, 20, 174, 94, 228, 36, 107, 163, 126, 252, 61, 5, 71, 30, 237, 59, 123, 30, 247, 40, 93, 105, 195, 55, 57, 20, 48, 40, 195, 170, 113, 15, 165, 146, 77, 84, 229, 100, 177, 46, 187, 6, 246, 13, 89, 3, 225, 137, 114, 186, 96, 14, 192, 235, 223, 144, 173, 121, 227, 38, 135, 163, 9, 173, 213, 143, 121, 195, 33, 29, 179, 115, 249, 194, 202, 78, 224, 242, 236, 207, 0, 180, 96, 161, 109, 17, 19, 232, 192, 25, 19, 42, 40, 167, 8, 9, 30, 97, 4, 43, 227, 113, 56, 101, 14, 57, 110, 131, 223, 141, 121, 96, 195, 67, 139, 136, 81, 60, 138, 200 },
                            Role = 1,
                            Username = "Fievez"
                        },
                        new
                        {
                            Id = 3,
                            PasswordHash = new byte[] { 117, 193, 4, 183, 80, 253, 80, 49, 72, 151, 150, 128, 20, 76, 209, 240, 155, 112, 4, 105, 8, 70, 46, 251, 119, 100, 82, 9, 168, 251, 173, 53, 159, 123, 23, 73, 193, 37, 49, 241, 15, 142, 1, 145, 127, 213, 112, 99, 80, 158, 51, 143, 203, 254, 255, 223, 19, 254, 224, 184, 250, 227, 204, 84, 183, 180, 175, 149, 170, 50, 23, 142, 195, 17, 20, 38, 182, 1, 100, 12, 172, 128, 67, 187, 135, 124, 245, 57, 51, 225, 251, 213, 189, 138, 91, 176, 91, 203, 166, 126, 2, 88, 171, 15, 138, 217, 254, 102, 101, 123, 34, 178, 234, 252, 155, 191, 65, 125, 189, 15, 179, 175, 176, 122, 250, 245, 247, 2, 93, 141, 237, 115, 181, 41, 25, 181, 163, 75, 69, 163, 23, 183, 168, 2, 126, 135, 99, 98, 24, 107, 127, 218, 190, 93, 118, 217, 231, 37, 220, 56, 72, 187, 182, 212, 68, 183, 199, 91, 84, 215, 184, 187, 245, 219, 182, 101, 190, 72, 237, 94, 74, 213, 158, 19, 179, 96, 92, 178, 70, 245, 130, 144, 148, 19, 182, 141, 116, 98, 100, 190, 135, 114, 146, 104, 157, 157, 172, 146, 155, 183, 0, 112, 73, 111, 43, 217, 121, 103, 92, 107, 232, 195, 195, 154, 165, 57, 63, 16, 17, 55, 79, 109, 142, 112, 194, 149, 57, 213, 250, 133, 64, 49, 31, 139, 46, 57, 122, 212, 22, 237, 245, 83, 104, 134, 7, 108, 236, 27, 10, 42, 155, 146, 98, 252, 134, 103, 250, 125, 61, 228, 188, 143, 17, 228, 98, 146, 100, 146, 244, 150, 125, 34, 198, 38, 141, 61, 2, 203, 206, 36, 172, 224, 237, 25, 21, 126, 78, 76, 219, 50, 181, 87, 143, 191, 247, 171, 107, 191, 195, 223, 113, 73, 19, 111, 83, 133, 239, 215, 252, 208, 76, 97, 36, 241, 94, 42, 88, 67, 43, 174, 239, 74, 106, 185, 4, 18, 200, 197, 216, 194, 217, 185, 86, 238, 148, 4, 11, 44, 167, 89, 20, 227, 51, 239, 181, 155, 199, 48, 99, 118, 219, 102, 93, 26, 222, 173, 76, 187, 99, 72, 64, 235, 113, 230, 65, 177, 131, 220, 115, 205, 18, 219, 25, 202, 179, 210, 178, 6, 9, 25, 126, 211, 33, 206, 138, 244, 28, 118, 40, 13, 67, 9, 137, 236, 246, 19, 153, 108, 225, 145, 229, 140, 2, 193, 36, 103, 17, 215, 222, 90, 25, 94, 79, 94, 102, 63, 157, 222, 240, 70, 92, 72, 172, 30, 172, 55, 39, 187, 72, 234, 21, 48, 178, 84, 43, 10, 211, 186, 11, 243, 67, 150, 57, 216, 169, 207, 147, 218, 59, 168, 250, 18, 114, 165, 221, 60, 18, 10, 18, 168, 255, 31, 47, 28, 40, 25, 39, 210, 51, 186, 151, 228, 185, 249, 254, 122, 189, 41, 112, 101, 178, 124, 5, 31, 61, 240, 54, 188, 171, 48, 102, 10, 122, 71, 219, 23, 130, 238, 174, 227, 218, 154 },
                            PasswordSalt = new byte[] { 111, 154, 228, 126, 49, 228, 201, 75, 135, 136, 209, 121, 64, 202, 161, 168, 6, 171, 41, 209, 241, 203, 20, 244, 226, 169, 221, 125, 254, 88, 112, 91, 141, 109, 119, 103, 142, 134, 133, 164, 69, 227, 204, 68, 190, 116, 15, 115, 164, 212, 73, 39, 69, 242, 24, 132, 121, 62, 237, 117, 247, 158, 120, 216, 127, 15, 222, 213, 243, 182, 224, 243, 50, 182, 255, 53, 238, 34, 59, 62, 247, 116, 10, 111, 157, 176, 120, 115, 141, 73, 106, 132, 135, 114, 18, 189, 66, 112, 204, 170, 16, 87, 116, 108, 89, 217, 234, 135, 245, 213, 70, 23, 45, 159, 167, 253, 19, 54, 88, 84, 33, 246, 120, 232, 87, 84, 88, 208 },
                            Role = 0,
                            Username = "François"
                        });
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("Dal.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesAsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dal.Models.User", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dal.Models.Course", b =>
                {
                    b.HasOne("Dal.Models.User", "Instructor")
                        .WithMany("CoursesAsInstructor")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Dal.Models.User", b =>
                {
                    b.Navigation("CoursesAsInstructor");
                });
#pragma warning restore 612, 618
        }
    }
}
