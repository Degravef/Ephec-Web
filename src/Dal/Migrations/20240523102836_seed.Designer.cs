// <auto-generated />
using System;
using Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dal.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240523102836_seed")]
    partial class seed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<int>("CoursesAsStudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CoursesAsStudentId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseUser");
                });

            modelBuilder.Entity("Dal.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "C# is a general-purpose, multi-paradigm programming language encompassing static typing, strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines.",
                            Name = "C#"
                        },
                        new
                        {
                            Id = 2,
                            Description = "TypeScript is a strict syntactical superset of JavaScript and adds optional static typing to the language. It is designed for the development of large applications and transcompiles to JavaScript.",
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = 3,
                            Description = "JavaScript, often abbreviated as JS, is a programming language that conforms to the ECMAScript specification. JavaScript is high-level, often just-in-time compiled, and multi-paradigm. It has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions.",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Java is a general-purpose programming language that is class-based, object-oriented, and designed to have as few implementation dependencies as possible.",
                            Name = "Java"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Kotlin is a cross-platform, statically typed, general-purpose programming language with type inference. It is designed to interoperate fully with Java.",
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Swift is a powerful and intuitive programming language for macOS, iOS, watchOS, and tvOS. Writing Swift code is interactive and fun, the syntax is concise yet expressive, and Swift includes modern features developers love.",
                            Name = "Swift"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Rust is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is syntactically similar to C++.",
                            Name = "Rust"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Python is an interpreted, high-level, general-purpose programming language. Created by  ",
                            Name = "Python"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Go is an open-source programming language that makes it easy to build simple, reliable, and efficient software.",
                            Name = "Go"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Scala is a strong statically typed general-purpose programming language which supports both object-oriented programming and functional programming.",
                            Name = "Scala"
                        });
                });

            modelBuilder.Entity("Dal.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 136, 198, 85, 137, 94, 88, 17, 45, 39, 54, 122, 191, 116, 161, 22, 230, 134, 78, 48, 183, 240, 149, 50, 244, 50, 219, 23, 214, 226, 186, 116, 79, 79, 32, 134, 74, 90, 94, 249, 137, 177, 203, 158, 18, 35, 211, 216, 132, 222, 121, 243, 9, 25, 130, 196, 139, 30, 182, 68, 139, 156, 2, 178, 120, 144, 223, 144, 199, 129, 161, 219, 129, 116, 103, 81, 112, 188, 97, 103, 241, 16, 43, 35, 21, 177, 6, 36, 158, 135, 84, 1, 235, 19, 105, 110, 113, 159, 161, 86, 200, 206, 234, 55, 168, 119, 165, 162, 92, 130, 5, 173, 75, 55, 234, 102, 8, 125, 15, 3, 134, 181, 165, 54, 101, 219, 254, 252, 128, 3, 24, 49, 226, 80, 139, 43, 33, 27, 91, 115, 232, 253, 21, 94, 210, 4, 243, 179, 198, 41, 35, 62, 78, 190, 62, 194, 107, 65, 53, 88, 213, 11, 6, 107, 175, 14, 227, 162, 254, 171, 42, 17, 138, 255, 216, 252, 0, 74, 91, 136, 58, 212, 160, 177, 77, 225, 200, 150, 200, 118, 38, 39, 92, 105, 123, 56, 27, 222, 148, 107, 67, 127, 235, 93, 39, 160, 208, 163, 251, 113, 202, 122, 213, 212, 35, 154, 211, 91, 18, 47, 176, 148, 122, 149, 186, 96, 194, 205, 32, 10, 14, 150, 34, 141, 143, 193, 112, 14, 67, 170, 246, 85, 5, 127, 64, 137, 251, 217, 125, 183, 130, 90, 108, 141, 155, 61, 6, 176, 138, 42, 200, 195, 122, 17, 141, 119, 195, 78, 211, 149, 145, 75, 206, 243, 3, 137, 162, 64, 26, 230, 105, 200, 248, 235, 254, 246, 56, 198, 189, 166, 201, 250, 80, 62, 138, 47, 17, 63, 92, 18, 139, 223, 210, 210, 232, 55, 6, 227, 18, 174, 138, 128, 111, 3, 110, 138, 98, 67, 56, 19, 210, 57, 10, 149, 21, 54, 70, 215, 25, 46, 149, 46, 66, 139, 51, 234, 67, 4, 171, 32, 245, 168, 94, 162, 236, 152, 64, 229, 197, 183, 58, 167, 143, 36, 237, 77, 87, 204, 46, 19, 106, 106, 99, 38, 32, 100, 174, 212, 107, 84, 102, 1, 118, 175, 252, 237, 124, 31, 16, 52, 178, 17, 208, 139, 68, 111, 19, 126, 248, 39, 181, 218, 15, 95, 144, 208, 98, 208, 50, 164, 164, 226, 234, 183, 20, 240, 163, 164, 146, 72, 71, 46, 223, 225, 198, 148, 11, 97, 137, 171, 195, 225, 71, 0, 115, 128, 34, 221, 102, 167, 205, 42, 73, 216, 43, 121, 151, 135, 49, 106, 195, 154, 179, 196, 167, 246, 224, 237, 101, 140, 122, 117, 81, 145, 178, 230, 52, 207, 114, 108, 141, 203, 110, 140, 219, 196, 207, 87, 243, 46, 24, 136, 192, 205, 0, 87, 109, 181, 139, 173, 45, 239, 137, 95, 145, 59, 16, 16, 94, 157, 140, 221, 148, 76, 235, 158, 115, 61, 213, 62, 230, 234, 155, 110, 251, 21, 57, 130, 178, 51, 234, 64, 74 },
                            PasswordSalt = new byte[] { 122, 155, 201, 22, 177, 255, 194, 185, 200, 85, 103, 232, 30, 195, 78, 19, 68, 102, 166, 54, 55, 166, 169, 87, 239, 44, 140, 122, 248, 131, 193, 101, 206, 32, 207, 148, 60, 243, 35, 216, 220, 78, 48, 89, 19, 11, 52, 179, 89, 225, 166, 57, 122, 236, 215, 80, 129, 10, 8, 203, 212, 22, 247, 93, 30, 85, 191, 199, 163, 6, 229, 47, 171, 232, 174, 28, 36, 15, 13, 230, 48, 52, 229, 212, 84, 229, 126, 59, 222, 17, 2, 221, 69, 200, 166, 118, 169, 161, 112, 90, 13, 15, 53, 110, 217, 33, 250, 224, 229, 47, 96, 59, 201, 79, 191, 239, 111, 246, 177, 102, 100, 41, 216, 159, 243, 163, 204, 118 },
                            Role = 2,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 244, 87, 4, 105, 199, 237, 162, 240, 6, 181, 36, 199, 109, 187, 179, 138, 138, 177, 254, 190, 221, 255, 227, 93, 215, 153, 226, 44, 253, 238, 205, 31, 186, 33, 90, 171, 195, 98, 37, 252, 35, 165, 139, 103, 161, 68, 122, 40, 11, 170, 15, 64, 147, 215, 228, 108, 166, 238, 73, 119, 48, 36, 233, 202, 222, 4, 236, 246, 109, 71, 41, 34, 35, 193, 92, 127, 121, 236, 165, 178, 88, 1, 109, 245, 203, 43, 60, 188, 31, 171, 70, 70, 70, 141, 236, 111, 150, 11, 0, 55, 238, 41, 124, 155, 255, 101, 93, 9, 232, 113, 129, 183, 241, 134, 118, 101, 116, 110, 119, 195, 79, 167, 25, 55, 121, 1, 252, 211, 176, 196, 233, 194, 223, 224, 107, 107, 231, 9, 71, 208, 181, 142, 21, 53, 109, 6, 1, 205, 240, 197, 39, 158, 94, 144, 229, 39, 243, 160, 126, 162, 201, 35, 85, 141, 70, 1, 213, 54, 105, 78, 34, 45, 10, 207, 44, 189, 65, 21, 45, 191, 220, 74, 217, 235, 75, 229, 25, 205, 5, 16, 205, 7, 208, 151, 42, 90, 224, 69, 161, 133, 154, 224, 214, 106, 183, 60, 207, 251, 77, 65, 244, 12, 140, 153, 40, 143, 245, 95, 128, 14, 175, 215, 38, 185, 43, 210, 198, 84, 128, 7, 33, 117, 237, 163, 112, 226, 77, 67, 0, 22, 229, 145, 235, 40, 96, 239, 70, 27, 240, 57, 126, 225, 152, 115, 225, 150, 149, 228, 195, 188, 145, 31, 209, 96, 243, 239, 167, 138, 254, 45, 220, 11, 200, 139, 120, 45, 42, 144, 47, 33, 94, 127, 86, 158, 147, 176, 4, 141, 156, 228, 198, 173, 155, 225, 58, 23, 177, 49, 38, 53, 246, 76, 28, 139, 72, 13, 74, 107, 14, 24, 198, 223, 78, 79, 58, 130, 137, 18, 152, 43, 219, 196, 122, 208, 191, 254, 243, 50, 158, 10, 1, 15, 172, 54, 233, 111, 2, 30, 136, 239, 144, 23, 87, 47, 36, 134, 232, 213, 64, 167, 235, 170, 44, 52, 211, 34, 99, 236, 150, 231, 115, 143, 57, 131, 198, 245, 8, 187, 234, 199, 218, 59, 206, 9, 101, 189, 22, 236, 244, 25, 11, 43, 22, 207, 73, 97, 195, 34, 66, 167, 56, 143, 128, 186, 232, 255, 65, 242, 170, 122, 105, 208, 140, 165, 249, 130, 45, 159, 158, 226, 82, 48, 243, 241, 37, 17, 250, 123, 136, 60, 40, 9, 80, 210, 25, 143, 180, 160, 125, 200, 105, 132, 242, 66, 169, 167, 190, 248, 68, 118, 246, 243, 102, 53, 65, 40, 87, 62, 51, 112, 0, 41, 240, 124, 255, 86, 186, 130, 139, 217, 248, 128, 145, 144, 47, 154, 43, 58, 153, 107, 177, 241, 174, 41, 48, 20, 188, 131, 5, 39, 51, 51, 66, 13, 43, 244, 28, 244, 19, 209, 212, 14, 171, 240, 19, 175, 33, 20, 228, 129, 46, 233, 38, 82, 123, 244, 58, 48, 40, 138, 36, 48 },
                            PasswordSalt = new byte[] { 233, 63, 246, 28, 205, 97, 72, 28, 117, 101, 211, 23, 183, 151, 176, 117, 81, 122, 77, 63, 163, 194, 58, 237, 66, 190, 34, 35, 136, 253, 194, 14, 83, 67, 195, 189, 45, 9, 12, 37, 40, 249, 225, 20, 39, 146, 145, 87, 232, 193, 243, 119, 162, 178, 133, 81, 102, 87, 55, 52, 57, 132, 92, 62, 181, 159, 148, 171, 2, 187, 111, 233, 25, 48, 152, 111, 97, 19, 67, 70, 60, 165, 120, 59, 192, 71, 70, 11, 156, 184, 93, 70, 247, 36, 128, 131, 238, 83, 155, 167, 161, 43, 6, 149, 236, 185, 238, 193, 232, 229, 180, 251, 215, 190, 24, 208, 254, 46, 231, 112, 145, 213, 35, 149, 214, 71, 116, 194 },
                            Role = 1,
                            Username = "Fievez"
                        },
                        new
                        {
                            Id = 3,
                            PasswordHash = new byte[] { 252, 137, 235, 69, 65, 61, 138, 182, 23, 129, 242, 28, 186, 195, 72, 186, 104, 188, 50, 145, 96, 151, 66, 26, 95, 5, 139, 139, 171, 115, 37, 175, 20, 34, 157, 39, 117, 139, 54, 109, 37, 13, 10, 187, 8, 225, 233, 21, 155, 13, 198, 11, 7, 62, 29, 26, 175, 58, 189, 41, 213, 215, 86, 77, 102, 175, 175, 147, 199, 113, 34, 159, 113, 208, 236, 5, 188, 143, 122, 235, 8, 38, 93, 86, 71, 173, 97, 254, 190, 131, 119, 10, 154, 66, 169, 60, 41, 70, 117, 210, 230, 158, 121, 5, 245, 101, 210, 203, 231, 191, 59, 220, 28, 110, 99, 194, 247, 35, 33, 67, 150, 153, 129, 132, 4, 82, 167, 228, 215, 217, 96, 139, 169, 184, 216, 93, 49, 17, 185, 75, 72, 190, 213, 204, 126, 202, 97, 70, 190, 216, 250, 105, 150, 249, 241, 253, 73, 167, 106, 245, 101, 142, 242, 182, 206, 144, 73, 71, 13, 91, 43, 69, 55, 173, 182, 254, 218, 101, 168, 55, 107, 141, 42, 174, 78, 157, 112, 36, 181, 167, 137, 60, 30, 253, 255, 22, 223, 44, 108, 193, 100, 233, 211, 91, 18, 54, 169, 139, 146, 158, 212, 235, 45, 91, 202, 173, 113, 32, 56, 181, 103, 233, 48, 123, 91, 241, 135, 64, 178, 245, 108, 142, 81, 36, 77, 138, 53, 202, 229, 206, 115, 105, 39, 121, 75, 217, 223, 120, 121, 158, 12, 142, 49, 17, 210, 245, 114, 21, 36, 78, 129, 241, 66, 179, 95, 248, 67, 90, 152, 4, 56, 151, 75, 253, 90, 145, 101, 43, 131, 143, 127, 185, 94, 31, 239, 40, 117, 114, 171, 209, 73, 230, 90, 130, 0, 212, 222, 144, 233, 244, 254, 8, 188, 10, 115, 170, 33, 5, 98, 190, 143, 155, 25, 67, 239, 66, 237, 198, 229, 242, 52, 146, 34, 184, 183, 182, 195, 171, 91, 123, 121, 68, 216, 175, 85, 143, 70, 26, 160, 49, 184, 161, 26, 217, 211, 229, 21, 1, 252, 214, 156, 4, 182, 137, 13, 100, 84, 180, 22, 161, 100, 88, 105, 99, 36, 201, 31, 161, 146, 45, 181, 61, 116, 171, 35, 174, 82, 166, 235, 129, 12, 238, 151, 74, 18, 49, 140, 130, 149, 16, 172, 179, 75, 228, 240, 14, 91, 133, 249, 137, 208, 50, 63, 202, 177, 209, 167, 111, 174, 67, 198, 58, 233, 157, 213, 208, 175, 113, 76, 56, 37, 30, 27, 7, 41, 103, 231, 12, 20, 36, 253, 86, 48, 237, 140, 247, 174, 249, 200, 252, 92, 164, 2, 97, 151, 181, 11, 199, 195, 95, 237, 224, 165, 9, 133, 13, 215, 100, 186, 173, 25, 46, 156, 216, 35, 243, 38, 61, 117, 228, 173, 182, 205, 81, 145, 93, 171, 132, 10, 209, 237, 52, 47, 217, 61, 46, 79, 21, 119, 14, 128, 154, 158, 116, 187, 159, 219, 209, 97, 73, 232, 129, 60, 127, 81, 214, 19, 159, 206, 247, 79, 122 },
                            PasswordSalt = new byte[] { 84, 176, 144, 195, 163, 5, 170, 120, 69, 110, 3, 239, 208, 148, 115, 229, 23, 113, 35, 95, 214, 210, 29, 89, 85, 79, 248, 33, 233, 115, 227, 216, 65, 179, 230, 36, 213, 234, 177, 104, 59, 138, 134, 216, 38, 46, 140, 165, 166, 96, 11, 184, 88, 213, 157, 154, 224, 53, 26, 212, 241, 101, 43, 220, 13, 94, 238, 87, 203, 41, 87, 89, 221, 249, 81, 61, 156, 216, 94, 66, 41, 191, 228, 193, 40, 99, 39, 101, 167, 41, 104, 251, 199, 216, 118, 165, 69, 224, 77, 9, 63, 221, 135, 201, 232, 2, 84, 97, 100, 99, 212, 173, 152, 242, 223, 248, 0, 142, 189, 214, 129, 42, 207, 61, 172, 37, 116, 116 },
                            Role = 1,
                            Username = "François"
                        });
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("Dal.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesAsStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dal.Models.User", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dal.Models.Course", b =>
                {
                    b.HasOne("Dal.Models.User", "Instructor")
                        .WithMany("CoursesAsInstructor")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("Dal.Models.User", b =>
                {
                    b.Navigation("CoursesAsInstructor");
                });
#pragma warning restore 612, 618
        }
    }
}
